function writetrackerlayout(Trck,varargin)
% WRITETRACKERLAYOUT(TRCK,OVERWRITE)
% Write a *.mounts file with a PV-plant layout as should be generated by the PREPROCESSOR.
% Trackers.centers is strictly required; .tilt, .azimuth, and .slope will be added if provided.
%
%     #file_format: PREPROCESSOR_VX.X
%     #layout_id: LAYOUTNAME
%     [#coords_system: CUSTOM]
%     #coords_center: 48.802374; 9.182250
%     [#coords_rotation: 0.0]
%     #mount_model_idx: 1; mount_model_id_1; 2; mount_model_id_2; ...
%     #(optional TRCK.info)
%     #...
%     #n;x;y;z;[tilt;azimuth;bank];group_id;mount_model
%     1;0.000;1.000;0.000[;0.000;0.000;0.000];1;1
%     2;0.000;2.000;0.000[;5.000;0.000;0.000];1;1
%
% TODO: consistent systems of coordinates, other than -WGS84 and what-you-get-is-what-you-write
%
% See also: IMPORTPLANTLAYOUT, EXPORTPOLYGONSFILE, SAMPLETRACKERS, WRITEARRAYDEFINITION

    narginchk(1,3);
    [opt,varargin] = getflagoptions(varargin,{'-wgs84','-overwrite'});
    if ~isempty(varargin)
       opt.overwrite = varargin{1};
       varargin = varargin(2:end);
    end
    assert(isempty(varargin) && ...
        isscalar(opt.overwrite) && islogical(opt.overwrite) || any(opt.overwrite == [0,1]),...
        'Unexpected argument(s)');

    if ~isfield(Trck,'info'), Trck.info = {}; end
    if ischar(Trck.info), Trck.info = {Trck.info}; end
    
    if ~isfield(Trck,'name'), Trck.name = 'Unidentified_Layout'; end
    if opt.wgs84, Trck.name = [Trck.name '_WGS84']; end
    filename = [Trck.name '.mounts'];
    
    specs.layout_id = Trck.name;
    
    C = Trck.centers;
    if opt.wgs84
        [C(1,:),C(2,:),C(3,:),SYS] = checkcoordsystem(C(1,:),C(2,:),C(3,:),Trck,'output','abs');
    else
        [C(1,:),C(2,:),C(3,:),SYS] = checkcoordsystem(C(1,:),C(2,:),C(3,:),Trck,'output','prj');
    end
    Trck.centers = C;
    
    specs.coords_system = SYS.system;
    specs.coords_center = sprintf('%0.6f N; %0.6f E; %0.1f m AMSL',SYS.origin([2,1,3]));
    if ~opt.wgs84
        specs.coords_rotation = sprintf('%0.2f',SYS.rotation);
    end
    
    for f = {'tilt','azimuth','slope'}
        if isfield(Trck,f{1}) && isscalar(Trck.(f{1}))
            specs.(f{1}) = sprintf('%g',Trck.(f{1}));
        end
    end
    
    if ~isfield(Trck,'modelidx') || ~isa(Trck.modelidx,'LabelMap')
        specs.mount_model_idx = '1; MOUNT_ID - Update!';
    else
        idx = map2lists(Trck.modelidx);
        lbl = Trck.modelidx.Lbl{idx};
        specs.mount_model_idx = arrayfun(@(j) sprintf('%d;%s',idx(j),lbl{j}),1:numel(idx),'unif',0);
        specs.mount_model_idx = strjoin(specs.mount_model_idx,';');
    end
    specs.comments = Trck.info;
    
	assert(isfield(Trck,'centers'),'Fields missing from Trackers structure')
    
    if ~right2overwrite(filename,opt.overwrite), return; end
	
	% open the first file, and read coordinates
	fileID = fopen(filename,'w');
	if fileID < 0, error('writetrackerlayout: Could not open/create file'); end
    
    % Write header
    fprintf(fileID,'#file_format: PREPROCESSOR_V2.0\r\n');
    specfields = setdiff(fieldnames(specs),{'comments'},'stable');
    for f = specfields'
        fprintf(fileID,'#%s: %s\r\n',f{1},specs.(f{1})); 
    end
    if isfield(specs,'comments')
        cellfun(@(r) fprintf(fileID,'#  %s\r\n',r),specs.comments); 
    end
    
    Ntr = size(Trck.centers,2);
    if ~isfield(Trck,'tidx'), Trck.tidx = 1:Ntr; end
    if ~isfield(Trck,'group'), Trck.group = ones(1,Ntr); end % single group
    if ~isfield(Trck,'model'), Trck.model = ones(1,Ntr); end
    
    header = '#n;x;y;z';
	angles = zeros(Ntr,0);
    if isfield(Trck,'tilt') && ~isscalar(Trck.tilt)
		angles = Trck.tilt(:);
        header = [header ';tilt'];
    end
    if isfield(Trck,'azimuth') && ~isscalar(Trck.azimuth)
        angles = [angles,Trck.azimuth(:)];
        header = [header ';azimuth'];
    end
    if isfield(Trck,'slope') && ~isscalar(Trck.slope)
        angles = [angles,Trck.slope(:)];
        header = [header ';bank'];
    end
    Na = size(angles,2); % number of angles
    header = [header,';group_id;mount_model\r\n'];
    fprintf(fileID,header);
    
    % Arrange everything in columns: N X Y Z [tilt azimuth bank] group  model
    if opt.wgs84
        formatstring = ['%d;%0.8f;%0.8f;%0.2f;' repmat('%0.2f;',1,Na) '%d;%d\r\n'];
    else
        formatstring = ['%d;%0.2f;%0.2f;%0.2f;' repmat('%0.2f;',1,Na) '%d;%d\r\n'];
    end
    fprintf(fileID,formatstring,[Trck.tidx(:) Trck.centers' angles Trck.group(:) Trck.model(:)]');
	
	fclose(fileID);
end
